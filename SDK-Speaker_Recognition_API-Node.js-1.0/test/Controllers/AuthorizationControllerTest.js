/*
 * SpeakerRecognitionAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
var assert = require('chai').assert;
var TestHelper = require('../TestHelper');
var APIHelper = require('../../lib/APIHelper');
var testerlib = require('../../lib');
var testConfiguration = require('../TestBootstrap');

var controller = testerlib.AuthorizationController;
 
var Get API version and test authentication Response = testerlib.Get API version and test authentication Response;
var List all Organizations Response = testerlib.List all Organizations Response;
var Create an Organization request = testerlib.Create an Organization request;
var Retrieve a List of All Representatives Response = testerlib.Retrieve a List of All Representatives Response;
var Get a Representative Response = testerlib.Get a Representative Response;
var Create a Representative request = testerlib.Create a Representative request;
var Create a Representative Response = testerlib.Create a Representative Response;
var Retrieve a List of All Clients Response = testerlib.Retrieve a List of All Clients Response;
var Get a Client Response = testerlib.Get a Client Response;
var Update a Client request = testerlib.Update a Client request;
var Update a Client Response = testerlib.Update a Client Response;
var Retrieve a List of All Models Response = testerlib.Retrieve a List of All Models Response;
var Retrieve a Model Response = testerlib.Retrieve a Model Response;
var Retrieve a List of All Calls Response = testerlib.Retrieve a List of All Calls Response;
var Retrieve a Call Response = testerlib.Retrieve a Call Response;
var Create a new call record and trigger recognition algorithm execution request = testerlib.Create a new call record and trigger recognition algorithm execution request;
var Create a new call record and trigger recognition algorithm execution Response = testerlib.Create a new call record and trigger recognition algorithm execution Response;
var Update an existing call record and trigger recognition algorithm execution request = testerlib.Update an existing call record and trigger recognition algorithm execution request;
var Update an existing call record and trigger recognition algorithm execution Response = testerlib.Update an existing call record and trigger recognition algorithm execution Response;


describe('AuthorizationController Tests', function() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * The API root is namespaced behind the version number as in http://recog.calltrackingmetrics.com/v1/ for API version 1.  
[TODO?] Authorization is handled via HMAC-SHA1 signing of each request and passing of the API key and signature in the authorization header.
To sign a request, first construct a UTF-8 multi-line string to sign containing the method, host, and query parameters.  For example, the a GET request to **http://recog.calltrackingmetrics.com/v1/orgs/{orgID}/reps?active=true** would be:
```
    GET\n
    recog.calltrackingmetrics.com\n
    /v1/orgs/{orgID}/reps\n
    active=true
```
where each line but the last is terminated with the newline character.  Sign the string above using HMAC-SHA1 with the secret key and then Base64 encode the string.  Pass the signed request in the Authorization headers as in:
```
    Authorization: {APIKey}:{RequestSignature}
```
     */ 
    it('should testGetAPIVersionAndTestAuthentication1 response', function(done) {
        
        controller.getAPIVersionAndTestAuthentication(function(error, response, context) {
            // Test response code
            assert.equal(200, context.response.statusCode);
            // Test headers
            var headers = [];
            headers["Authorization"] = null ;
            headers["Content-Type"] = null ;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.equal("{\"version\": \"1.0\", \"root\": \"http://recog.calltrackingmetrics.com/v1\", \"description\": \"CallTrackingMetrics Speaker Recognition Service\"}", context.response.body);
            done();
        });
    });

});
